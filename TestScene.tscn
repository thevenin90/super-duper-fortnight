[gd_scene load_steps=8 format=2]

[ext_resource path="res://gmidi/addons/midi/MidiPlayer.gd" type="Script" id=1]
[ext_resource path="res://gmidi/addons/midi/icon.png" type="Texture" id=2]
[ext_resource path="res://gmidi/ui/ChannelGuide.tscn" type="PackedScene" id=3]
[ext_resource path="res://gmidi/ui/ChannelIndicator.tscn" type="PackedScene" id=4]
[ext_resource path="res://gmidi/ui/play.png" type="Texture" id=5]
[ext_resource path="res://gmidi/ui/stop.png" type="Texture" id=6]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

const SMF = preload( \"res://gmidi/addons/midi/SMF.gd\" )
const Utility = preload( \"res://gmidi/addons/midi/Utility.gd\" )

onready var midi_player:MidiPlayer = $GodotMIDIPlayer
var tempo_changing:bool = false
var updating_seek_bar:bool = false
var ui_channels:Array = []

\"\"\"
	Initializes
\"\"\"
func _ready( ):
	self._setup_channel_status_viewers( )
	if $GodotMIDIPlayer.connect( \"midi_event\", self, \"_on_midi_event\" ) != OK:
		print( \"error\" )
		breakpoint

	# uncomment here for test MIDI input.
	OS.open_midi_inputs( )
	print( OS.get_connected_midi_inputs( ) )
	for current_midi_input in OS.get_connected_midi_inputs( ):
		print(current_midi_input)

func _setup_channel_status_viewers( ):
	for i in range( 0, 16 ):
		var ci = $ChannelIndicators.get_node( str( i ) )
		ci.midi_player = self.midi_player
		ci.channel = self.midi_player.channel_status[i]

func _unhandled_input( event:InputEvent ):
	if event is InputEventMIDI:
		self.midi_player.receive_raw_midi_message( event )

\"\"\"
	Process
\"\"\"
func _process( _delta:float ):
	self.midi_player.volume_db = $TopController/Second/VolumeBar.value

	if self.midi_player.playing:
		self._process_update_apply_ui( )

	# Update polyphony status text
	$TopController/First/PolyphonyStatus.text = (
		( \"polyphony %d / %d\" % [
			self.midi_player.get_now_playing_polyphony( ),
			self.midi_player.max_polyphony
		] )
	)

func _process_update_apply_ui( ):
	# Update some values
	self.midi_player.play_speed = $TopController/Second/PlaySpeedBar.value
	self.midi_player.loop = $TopController/First/Loop.pressed

	# Update seek bar
	self.updating_seek_bar = true
	$TopController/Third/SeekBar.min_value = 0
	$TopController/Third/SeekBar.max_value = self.midi_player.last_position
	$TopController/Third/SeekBar.value = self.midi_player.position
	self.updating_seek_bar = false

	# Update tempo line edit
	if not self.tempo_changing:
		$TopController/First/Tempo.text = str( self.midi_player.tempo )

\"\"\"
	Signals
\"\"\"
func _on_SeekBar_value_changed( value:float ):
	if not self.updating_seek_bar:
		if not self.midi_player.playing:
			self.midi_player.play( value )
		else:
			self.midi_player.seek( value )

func _on_ui_tempo_focus_entered( ):
	self.tempo_changing = true

func _on_ui_tempo_focus_exited( ):
	self.tempo_changing = false

func _on_ui_tempo_entered( _o:String ):
	var bpm:int = int( $TopController/First/Tempo.text )
	if 0 <= bpm:
		self.midi_player.tempo = bpm

func _on_OpenButton_pressed( ):
	$FileDialog.visible = true

func _on_FileDialog_file_selected( path ):
	self.updating_seek_bar = true
	self.midi_player.stop( )
	self.midi_player.send_reset( )
	self.midi_player.file = path
	$TopController/Second/PlaySpeedBar.value = 1.0
	$TopController/Third/SeekBar.value = 0.0
	self.midi_player.play( 0.0 )
	self.updating_seek_bar = false

func _on_midi_event( channel, event ):
	# channel is same as $GodotMidiPlayer.channel_status[track_id]
	# event is event parameter. see SMF.gd and MidiPlayer.gd
	# 	-> more information at \"MIDIEvent\" at https://bitbucket.org/arlez80/godot-midi-player/wiki/struct/SMF

	if not $TopController/First/OutputEvent.pressed: return

	# Output event data to stdout
	var event_string = \"\"
	match event.type:
		SMF.MIDIEventType.note_off:
			event_string = \"NoteOff %d\" % event.note
		SMF.MIDIEventType.note_on:
			event_string = \"NoteOn note[%d] velocity[%d]\" % [ event.note, event.velocity ]
		SMF.MIDIEventType.polyphonic_key_pressure:
			event_string = \"PolyphonicKeyPressure note[%d] value[%d]\" % [ event.note, event.value ] 
		SMF.MIDIEventType.control_change:
			event_string = \"ControlChange number[%d] value[%d]\" % [ event.number, event.value ]
		SMF.MIDIEventType.program_change:
			event_string = \"ProgramChange #%d\" % event.number
		SMF.MIDIEventType.pitch_bend:
			event_string = \"PitchBend %d -> %f\" % [ event.value, ( event.value / 8192.0 ) - 1.0 ]
		SMF.MIDIEventType.channel_pressure:
			event_string = \"ChannelPressure %d\" % event.value
		SMF.MIDIEventType.system_event:
			event_string = \"SystemEvent %d\" % event.args.type

	print( channel, event, \"channel:%d event-type:%s\" % [
		channel.number,
		event_string,
	])

func _on_Play_pressed( ):
	$GodotMIDIPlayer.play( )

func _on_Stop_pressed():
	$GodotMIDIPlayer.stop( )
"

[node name="TestScene" type="Node"]
script = SubResource( 1 )

[node name="GodotMIDIPlayer" type="Node" parent="."]
script = ExtResource( 1 )
__meta__ = {
"_editor_icon": ExtResource( 2 )
}
file = "res://gmidi/data/fairyland_gm.mid"
playing = true
soundfont = "res://gmidi/data/Aspirin-Stereo.sf2"

[node name="TopController" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 8.0
margin_top = 2.0
margin_right = -10.0
margin_bottom = -514.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="First" type="HBoxContainer" parent="TopController"]
margin_right = 1006.0
margin_bottom = 24.0

[node name="Label" type="Label" parent="TopController/First"]
margin_top = 5.0
margin_right = 200.0
margin_bottom = 19.0
text = "Godot MIDI Player Library Test:"

[node name="OpenButton" type="Button" parent="TopController/First"]
margin_left = 204.0
margin_right = 251.0
margin_bottom = 24.0
text = "Open"

[node name="Play" type="Button" parent="TopController/First"]
margin_left = 255.0
margin_right = 311.0
margin_bottom = 24.0
text = "Play"
icon = ExtResource( 5 )

[node name="Stop" type="Button" parent="TopController/First"]
margin_left = 315.0
margin_right = 373.0
margin_bottom = 24.0
text = "Stop"
icon = ExtResource( 6 )

[node name="Loop" type="CheckBox" parent="TopController/First"]
margin_left = 377.0
margin_right = 436.0
margin_bottom = 24.0
text = "Loop"

[node name="TempoDisp" type="Label" parent="TopController/First"]
margin_left = 440.0
margin_top = 5.0
margin_right = 484.0
margin_bottom = 19.0
text = "Tempo"

[node name="Tempo" type="LineEdit" parent="TopController/First"]
margin_left = 488.0
margin_right = 546.0
margin_bottom = 24.0

[node name="OutputEvent" type="CheckBox" parent="TopController/First"]
margin_left = 550.0
margin_right = 731.0
margin_bottom = 24.0
text = "Output Events to Stdout"

[node name="PolyphonyStatus" type="Label" parent="TopController/First"]
margin_left = 735.0
margin_top = 5.0
margin_right = 844.0
margin_bottom = 19.0
text = "Polyphony Status"

[node name="Second" type="HBoxContainer" parent="TopController"]
margin_top = 28.0
margin_right = 1006.0
margin_bottom = 42.0
size_flags_horizontal = 3

[node name="Label2" type="Label" parent="TopController/Second"]
margin_right = 65.0
margin_bottom = 14.0
text = "PlaySpeed"

[node name="PlaySpeedBar" type="HScrollBar" parent="TopController/Second"]
margin_left = 69.0
margin_right = 509.0
margin_bottom = 14.0
size_flags_horizontal = 3
size_flags_vertical = 3
max_value = 2.0
value = 1.0

[node name="Label3" type="Label" parent="TopController/Second"]
margin_left = 513.0
margin_right = 562.0
margin_bottom = 14.0
text = "Volume"

[node name="VolumeBar" type="HScrollBar" parent="TopController/Second"]
margin_left = 566.0
margin_right = 1006.0
margin_bottom = 14.0
size_flags_horizontal = 3
size_flags_vertical = 3
min_value = -50.0
max_value = -10.0
value = -20.0

[node name="Third" type="HBoxContainer" parent="TopController"]
margin_top = 46.0
margin_right = 1006.0
margin_bottom = 60.0

[node name="Label4" type="Label" parent="TopController/Third"]
margin_right = 30.0
margin_bottom = 14.0
text = "Seek"

[node name="SeekBar" type="HScrollBar" parent="TopController/Third"]
margin_left = 34.0
margin_right = 1006.0
margin_bottom = 12.0
size_flags_horizontal = 3

[node name="ChannelGuide" parent="." instance=ExtResource( 3 )]
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 8.0
margin_top = 60.0
margin_right = 1014.0
margin_bottom = 90.0

[node name="ChannelIndicators" type="Control" parent="."]
margin_top = 90.0
margin_right = 38.0
margin_bottom = 183.0

[node name="0" parent="ChannelIndicators" instance=ExtResource( 4 )]

[node name="1" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 32.0

[node name="2" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 64.0

[node name="3" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 96.0

[node name="4" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 128.0

[node name="5" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 160.0

[node name="6" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 192.0

[node name="7" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 224.0

[node name="8" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 256.0

[node name="9" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 288.0

[node name="10" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 320.0

[node name="11" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 352.0

[node name="12" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 384.0
margin_bottom = 384.0

[node name="13" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 416.0

[node name="14" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 448.0

[node name="15" parent="ChannelIndicators" instance=ExtResource( 4 )]
margin_top = 480.0

[node name="FileDialog" type="FileDialog" parent="."]
margin_left = 242.0
margin_top = 102.0
margin_right = 767.0
margin_bottom = 447.0
rect_min_size = Vector2( 300, 105 )
window_title = "Open a File"
mode = 0
access = 2
filters = PoolStringArray( "*.mid" )

[connection signal="pressed" from="TopController/First/OpenButton" to="." method="_on_OpenButton_pressed"]
[connection signal="pressed" from="TopController/First/Play" to="." method="_on_Play_pressed"]
[connection signal="pressed" from="TopController/First/Stop" to="." method="_on_Stop_pressed"]
[connection signal="focus_entered" from="TopController/First/Tempo" to="." method="_on_ui_tempo_focus_entered"]
[connection signal="focus_exited" from="TopController/First/Tempo" to="." method="_on_ui_tempo_focus_exited"]
[connection signal="text_entered" from="TopController/First/Tempo" to="." method="_on_ui_tempo_entered"]
[connection signal="value_changed" from="TopController/Third/SeekBar" to="." method="_on_SeekBar_value_changed"]
[connection signal="file_selected" from="FileDialog" to="." method="_on_FileDialog_file_selected"]
